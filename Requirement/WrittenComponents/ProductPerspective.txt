This system will be a de novo construction of a sudoku solver. Several components that will each do
a specific task will be integrated to create a complete sudoku solver. 

System interfaces:
The components within the system are as follows:
1. Web-scraper that will retreive the 9x9 sudoku grid from a website. 
2. Sudoku solver.
3. Feed of the actions being taken by the sudoku solver.
(any more?? are we gonna make #3???)

There will be two main interfaces regarding the afformentioned components: the interface between
the Web-scraper and the Solver and the interface between the Solver and the Live-feed.
For the first interface,The sudoku grid must be retreived from the web and piped to the sudoku solv
er as a 9x9 table.
(comma seperated or something else??? should have specific format for the output of the webscraper).
For the second interface, after every action, the name of that action and the resultant change will
be specified to the live-feed. This will allow the feed to be updated after every action.

How will user interact with the interfaces? 

What will be supplied as input for the system? 

User Interfaces:
For this part we may have to decide a layout of how the game will look. Mostly have to give
indication about what we will give the player in terms of the screen and what they can view.

The feed will be comprised of a 9x9 sudoku board and indications of changes within the board. There
will be possible value numbers given in each square within the board. The numbers will be arranged
from the top left of each square from 1-9 clockwise as follows: (should provide an image of the
square) The new actions will be color coded????(maybe). Each actino will have a corresponding
display indicating the squares involved and the logic used(maybe). 


Hardware Interfaces:

Are we going to make this as a web application? or no


Software Interfaces:

Selenium
Python3

that's it??

some web browser?? do we have to specify the web browser it works with??
This software is designed to work with the following web browser(s)

Memory Constraints

Since we are using an AI we might have some memory constraints?
could just mention the memory we tested on and the maximum memory that the program used

 -----------------------------------------------------------------------------
Will's thoughts:
	Terminal based (without GUI). When user run the the program:
		python3 runner.py*
	A web brower will pop up and open WEB Sudoku page, then:
		crawl(selenium) -> solve(AI) -> modified javascript(selenium) 
	Detalied:
		1. Crawl the web page get the Sudoku puzzle.
		2. Put the data into a format that can recognized by the
		solver. Like 2D numpy or lists of list. 
		3. AI solve processing. 
			3.1 AI + modified javascript:
				While AI is solving, we can show the processing
				it is doing (looks cool), like this:
				https://en.wikipedia.org/wiki/Sudoku_solving_algorithms#/media/File:Sudoku_solved_by_bactracking.gif

	The program will keep checking if there exist a new puzzle. There are 
	sounds problems with this approach. Like what if the user want to quit
	the software? Just Ctrl-C in the terminal? Moreover, while the programing is
	keeping running, probably going to consume memory while running time
	increasing. And also there are different game mode. Harder mode may
	also consumes more memory. 

	NOTE:
		* The command can pass command arguments(CA), since WEB Sudoku can
		  select a game number. If no CA, start to solve the one
		  whatever the one opened. 
		
	Browser:
		Use whatever browers have on the user's PC. This will cause a
		bug if there are no browers on user's PC (for some Linux user). 
	
	Platform: 
		Probably Unix only? Really not sure about Windows. 
	
